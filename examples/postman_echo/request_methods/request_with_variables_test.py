# NOTE: Generated By HttpRunner v4.3.5
# FROM: request_methods/request_with_variables.yml
# httprunner包下__init__.py下有导入过，所以from httprunner.runner import HttpRunner
# 可以简化成from httprunner import HttpRunner
import pytest

from httprunner import HttpRunner, Config, Step, RunRequest


class TestCaseRequestWithVariables(HttpRunner):

    config = (
        # 创建Config实例，赋值一系列实例属性，包括Tconfig模型self.__config，self.name,self.__base_url,self.__variables
        # name里面的变量只能是varibles里定义的，或者是可调用函数
        Config("request $$${sum_two(9,9)}methods $$$foo1 testcase $$with ${foo2}")
        # Config("request methods testcase with variables")
        # 程序会先解析这里的变量，变量本身可以包含可调用函数，和变量列表里其他变量，不能包含自己，互相包含目前会死循环
        # $$会被解析成一个$,会产生一个问题，当下一次再走解析逻辑会被识别成一个变量，但这个变量又找不到，会直接报错
        .variables(**{"foo1": "testcase_config_bar1${sum_two(9,9)}$foo2", "foo2": "testcase_config_bar2"})
        # .variables(**{"foo1": "testcase_config_bar1", "foo2": "testcase_config_bar2"})
        # 也能有变量，同config.name
        .base_url("https://postman-echo.com")
        # 是否开启ssl校验
        .verify(False)
    )

    teststeps = [
        Step(
            RunRequest("get with params")  # RunRequest对象，创建Tstep module给self.__step
            # copy一份新的变量mapping作为当前step里的变量，包含这里的变量，还有上面config里的变量，key相同则覆盖
            .with_variables(**{"foo1": "bar11", "foo2": "bar21"})
            .get("/get")  # 返回RequestWithOptionalArgs对象，Tstep module self.__step作为传参
            .with_params(**{"foo1": "$foo1", "foo2": "$foo2"})  # 继续更新Tstep模型self.__step
            .with_headers(**{"User-Agent": "HttpRunner/3.0"})
            .extract()  # 返回StepRequestExtraction对象，self.__step作为传参
            .with_jmespath("body.args.foo2", "foo3")  # 继续更新Tstep模型self.__step
            .validate()  # 返回StepRequestValidation对象，self.__step作为传参
            # validate这里的变量mapping包含config/step variables/extract和step里请求/响应信息
            .assert_equal("status_code", 200)  # 继续更新Tstep模型self.__step的validators字段
            .assert_equal("body.args.foo1", "bar11")
            .assert_equal("body.args.foo2", "bar21")  # 最终返回StepRequestValidation对象，所有信息携带在self.__step里
            # 最后把self.__step传递给Step实例，作为实例属性
        ),
        Step(
            RunRequest("post raw text")
            .with_variables(**{"foo1": "bar12", "foo3": "bar32"})
            .post("/post")
            .with_headers(
                **{"User-Agent": "HttpRunner/3.0", "Content-Type": "text/plain"}
            )
            .with_data(
                "This is expected to be sent back as part of response body: $foo1-$foo2-$foo3."
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal(
                "body.data",
                "This is expected to be sent back as part of response body: bar12-testcase_config_bar2-bar32.",
            )
        ),
        Step(
            RunRequest("post form data")
            .with_variables(**{"foo2": "bar23"})
            .post("/post")
            .with_headers(
                **{
                    "User-Agent": "HttpRunner/3.0",
                    "Content-Type": "application/x-www-form-urlencoded",
                }
            )
            .with_data("foo1=$foo1&foo2=$foo2&foo3=$foo3")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal("body.form.foo1", "testcase_config_bar118testcase_config_bar2")
            .assert_equal("body.form.foo2", "bar23")
            .assert_equal("body.form.foo3", "bar21")
        ),
        Step(
            RunRequest("post form data using json")
            .with_variables(
                **{
                    "foo2": "bar23",
                    "jsondata": {"foo1": "$foo1", "foo2": "$foo2", "foo3": "$foo3"},
                }
            )
            .post("/post")
            .with_headers(
                **{"User-Agent": "HttpRunner/3.0", "Content-Type": "application/json"}
            )
            .with_json("$jsondata")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal("body.data.foo1", "testcase_config_bar118testcase_config_bar2")
            .assert_equal("body.data.foo2", "bar23")
            .assert_equal("body.data.foo3", "bar21")
        ),
    ]


if __name__ == "__main__":
    # TestCaseRequestWithVariables类继承HttpRunner空类，HttpRunner又继承SessionRunner
    # TestCaseRequestWithVariables类属性config和teststeps会覆盖SessionRunner的同名类属性
    # 所以test_start()可以调用上面的config.__config,config.name等，teststeps[0].__step

    # 不用pytest执行
    # TestCaseRequestWithVariables().test_start()

    # 用pytest自己匹配可执行用例，也可以用命令pytest request_with_variables_test.py执行测试用例
    pytest.main()

